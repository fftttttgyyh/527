
import logging
import asyncio
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω—ã
BOT_TOKEN = "7711943797:AAEH55uTy0eokX_61OV0MuaMf71YsDENLCw"
ADMIN_IDS = [7058578094]

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = "users.json"
WAITING_FILE = "waiting.json"
CHATS_FILE = "chats.json"

class AnonymousBot:
    def __init__(self):
        self.users = self.load_data(USERS_FILE, {})
        self.waiting_users = self.load_data(WAITING_FILE, [])
        self.active_chats = self.load_data(CHATS_FILE, {})
        self.admin_broadcast_mode = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        
    def load_data(self, filename, default):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return default
    
    def save_data(self, filename, data):
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    
    def get_main_keyboard(self):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find_chat")],
            [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_chat")]
        ])
    
    def get_chat_keyboard(self):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üë§ –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", callback_data="next_chat")],
            [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_chat")]
        ])
    
    def get_admin_keyboard(self):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
        ])
    
    def get_broadcast_keyboard(self):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="broadcast_text")],
            [InlineKeyboardButton("üì∑ –§–æ—Ç–æ", callback_data="broadcast_photo")],
            [InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data="broadcast_video")],
            [InlineKeyboardButton("üéµ –ê—É–¥–∏–æ", callback_data="broadcast_audio")],
            [InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ", callback_data="broadcast_voice")],
            [InlineKeyboardButton("‚≠ï –ö—Ä—É–∂–æ—á–µ–∫", callback_data="broadcast_video_note")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    
    async def setup_commands(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        commands = [
            BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("find", "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"), 
            BotCommand("next", "üë§ –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"),
            BotCommand("end", "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
            BotCommand("admin", "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
        ]
        await application.bot.set_my_commands(commands)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = str(update.effective_user.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        if user_id not in self.users:
            self.users[user_id] = {
                'username': update.effective_user.username or "–ê–Ω–æ–Ω–∏–º",
                'first_name': update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            }
            self.save_data(USERS_FILE, self.users)
        
        welcome_text = """üé≠ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ.

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ  
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–æ–≤
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/find - –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
/next - —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
/end - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥

<b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —Å–ø–∞–º
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –∑–∞–∫–æ–Ω—ã –†–§

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        await update.message.reply_text(
            welcome_text,
            reply_markup=self.get_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    async def find_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /find"""
        user_id = str(update.effective_user.id)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º callback query –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
        class FakeQuery:
            def __init__(self, user_id):
                self.from_user = type('obj', (object,), {'id': int(user_id)})
            async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        
        fake_query = FakeQuery(user_id)
        await self.find_chat(user_id, fake_query, context)
    
    async def next_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /next"""
        user_id = str(update.effective_user.id)
        
        class FakeQuery:
            def __init__(self, user_id):
                self.from_user = type('obj', (object,), {'id': int(user_id)})
            async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        
        fake_query = FakeQuery(user_id)
        await self.next_chat(user_id, fake_query, context)
    
    async def end_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /end"""
        user_id = str(update.effective_user.id)
        
        class FakeQuery:
            def __init__(self, user_id):
                self.from_user = type('obj', (object,), {'id': int(user_id)})
            async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        
        fake_query = FakeQuery(user_id)
        await self.end_chat(user_id, fake_query, context)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admin"""
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        admin_text = """‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await update.message.reply_text(
            admin_text,
            reply_markup=self.get_admin_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        
        if query.data == "find_chat":
            await self.find_chat(user_id, query, context)
        elif query.data == "end_chat":
            await self.end_chat(user_id, query, context)
        elif query.data == "next_chat":
            await self.next_chat(user_id, query, context)
        elif query.data == "cancel_search":
            await self.cancel_search(user_id, query)
        elif query.data == "admin_panel":
            await self.admin_panel(query)
        elif query.data == "admin_broadcast":
            await self.admin_broadcast_menu(query)
        elif query.data == "admin_stats":
            await self.admin_stats_callback(query)
        elif query.data == "admin_close":
            await self.admin_close(query)
        elif query.data.startswith("broadcast_"):
            await self.handle_broadcast_type(query, context)
    
    async def find_chat(self, user_id, query, context):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —á–∞—Ç–µ –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id in self.active_chats:
            await query.edit_message_text(
                "‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                reply_markup=self.get_chat_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ
        if user_id in self.waiting_users:
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="cancel_search")]]
            await query.edit_message_text(
                "‚è≥ –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        if self.waiting_users:
            partner_id = self.waiting_users.pop(0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            if partner_id == user_id:
                if self.waiting_users:
                    partner_id = self.waiting_users.pop(0)
                else:
                    self.waiting_users.append(user_id)
                    self.save_data(WAITING_FILE, self.waiting_users)
                    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="cancel_search")]]
                    await query.edit_message_text(
                        "‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —á–∞—Ç—É.",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return
            
            # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
            self.active_chats[user_id] = partner_id
            self.active_chats[partner_id] = user_id
            
            self.save_data(WAITING_FILE, self.waiting_users)
            self.save_data(CHATS_FILE, self.active_chats)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await query.edit_message_text(
                "‚úÖ <b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!</b>\n\nüí¨ –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º.",
                reply_markup=self.get_chat_keyboard(),
                parse_mode=ParseMode.HTML
            )
            
            try:
                await context.bot.send_message(
                    chat_id=int(partner_id),
                    text="‚úÖ <b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!</b>\n\nüí¨ –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º.",
                    reply_markup=self.get_chat_keyboard(),
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner_id}: {e}")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.waiting_users.append(user_id)
            self.save_data(WAITING_FILE, self.waiting_users)
            
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="cancel_search")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚è≥ <b>–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</b>\n\n–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —á–∞—Ç—É.\n–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏!",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    async def next_chat(self, user_id, query, context):
        """–ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
        if user_id not in self.active_chats:
            await query.edit_message_text(
                "‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                reply_markup=self.get_main_keyboard()
            )
            return
        
        partner_id = self.active_chats[user_id]
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        del self.active_chats[user_id]
        if partner_id in self.active_chats:
            del self.active_chats[partner_id]
        self.save_data(CHATS_FILE, self.active_chats)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            await context.bot.send_message(
                chat_id=int(partner_id),
                text="üíî <b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                reply_markup=self.get_main_keyboard(),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner_id}: {e}")
        
        # –°—Ä–∞–∑—É –∏—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        await self.find_chat(user_id, query, context)
    
    async def end_chat(self, user_id, query, context):
        if user_id not in self.active_chats:
            await query.edit_message_text(
                "‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ.",
                reply_markup=self.get_main_keyboard()
            )
            return
        
        partner_id = self.active_chats[user_id]
        
        # –£–¥–∞–ª—è–µ–º —á–∞—Ç
        del self.active_chats[user_id]
        if partner_id in self.active_chats:
            del self.active_chats[partner_id]
        self.save_data(CHATS_FILE, self.active_chats)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö
        await query.edit_message_text(
            "üíî <b>–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ!\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
            reply_markup=self.get_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
        
        try:
            await context.bot.send_message(
                chat_id=int(partner_id),
                text="üíî <b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ!\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                reply_markup=self.get_main_keyboard(),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner_id}: {e}")
    
    async def cancel_search(self, user_id, query):
        if user_id in self.waiting_users:
            self.waiting_users.remove(user_id)
            self.save_data(WAITING_FILE, self.waiting_users)
        
        await query.edit_message_text(
            "‚ùå <b>–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=self.get_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    async def admin_panel(self, query):
        if query.from_user.id not in ADMIN_IDS:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        admin_text = """‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            admin_text,
            reply_markup=self.get_admin_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    async def admin_broadcast_menu(self, query):
        if query.from_user.id not in ADMIN_IDS:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        broadcast_text = """üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ –¢–µ–∫—Å—Ç - –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –§–æ—Ç–æ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
‚Ä¢ –í–∏–¥–µ–æ - –≤–∏–¥–µ–æ—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é  
‚Ä¢ –ê—É–¥–∏–æ - –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ - –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ö—Ä—É–∂–æ—á–µ–∫ - –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫"""
        
        await query.edit_message_text(
            broadcast_text,
            reply_markup=self.get_broadcast_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_broadcast_type(self, query, context):
        if query.from_user.id not in ADMIN_IDS:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        user_id = query.from_user.id
        broadcast_type = query.data.replace("broadcast_", "")
        
        self.admin_broadcast_mode[user_id] = broadcast_type
        
        type_names = {
            "text": "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "photo": "—Ñ–æ—Ç–æ",
            "video": "–≤–∏–¥–µ–æ", 
            "audio": "–∞—É–¥–∏–æ",
            "voice": "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "video_note": "–≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫"
        }
        
        await query.edit_message_text(
            f"üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ {type_names.get(broadcast_type, '–∫–æ–Ω—Ç–µ–Ω—Ç')}</b>\n\n"
            f"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n"
            f"<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin</i>",
            parse_mode=ParseMode.HTML
        )
    
    async def admin_stats_callback(self, query):
        if query.from_user.id not in ADMIN_IDS:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        total_users = len(self.users)
        waiting_count = len(self.waiting_users)
        active_chats_count = len(self.active_chats) // 2
        
        waiting_list = ", ".join(self.waiting_users[:5]) if self.waiting_users else "–ù–µ—Ç"
        if len(self.waiting_users) > 5:
            waiting_list += f" –∏ –µ—â–µ {len(self.waiting_users) - 5}..."
        
        stats_text = f"""üìä <b>–ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>
‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: <b>{waiting_count}</b>
üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: <b>{active_chats_count}</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏:</b>
<code>{waiting_list}</code>

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:</b>
{active_chats_count} –ø–∞—Ä –æ–±—â–∞–µ—Ç—Å—è"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    
    async def admin_close(self, query):
        await query.edit_message_text(
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞</b>",
            parse_mode=ParseMode.HTML
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = str(update.effective_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if int(user_id) in self.admin_broadcast_mode:
            await self.handle_admin_broadcast(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
        if user_id not in self.active_chats:
            await update.message.reply_text(
                "‚ùå <b>–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ</b>\n\n–ù–∞–π–¥–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è.",
                reply_markup=self.get_main_keyboard(),
                parse_mode=ParseMode.HTML
            )
            return
        
        partner_id = self.active_chats[user_id]
        
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            if update.message.text:
                await context.bot.send_message(
                    chat_id=int(partner_id),
                    text=f"üí¨ {update.message.text}"
                )
            elif update.message.photo:
                caption = "üì∑ –§–æ—Ç–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                if update.message.caption:
                    caption += f"\n\nüí¨ {update.message.caption}"
                await context.bot.send_photo(
                    chat_id=int(partner_id),
                    photo=update.message.photo[-1].file_id,
                    caption=caption
                )
            elif update.message.video:
                caption = "üé• –í–∏–¥–µ–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                if update.message.caption:
                    caption += f"\n\nüí¨ {update.message.caption}"
                await context.bot.send_video(
                    chat_id=int(partner_id),
                    video=update.message.video.file_id,
                    caption=caption
                )
            elif update.message.audio:
                caption = "üéµ –ê—É–¥–∏–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                if update.message.caption:
                    caption += f"\n\nüí¨ {update.message.caption}"
                await context.bot.send_audio(
                    chat_id=int(partner_id),
                    audio=update.message.audio.file_id,
                    caption=caption
                )
            elif update.message.voice:
                await context.bot.send_voice(
                    chat_id=int(partner_id),
                    voice=update.message.voice.file_id,
                    caption="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                )
            elif update.message.video_note:
                await context.bot.send_video_note(
                    chat_id=int(partner_id),
                    video_note=update.message.video_note.file_id
                )
                await context.bot.send_message(
                    chat_id=int(partner_id),
                    text="‚≠ï –ö—Ä—É–∂–æ—á–µ–∫ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                )
            elif update.message.sticker:
                await context.bot.send_sticker(
                    chat_id=int(partner_id),
                    sticker=update.message.sticker.file_id
                )
                await context.bot.send_message(
                    chat_id=int(partner_id),
                    text="üòä –°—Ç–∏–∫–µ—Ä –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                )
            elif update.message.document:
                caption = "üìé –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                if update.message.caption:
                    caption += f"\n\nüí¨ {update.message.caption}"
                await context.bot.send_document(
                    chat_id=int(partner_id),
                    document=update.message.document.file_id,
                    caption=caption
                )
            elif update.message.animation:
                caption = "üé≠ GIF –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                if update.message.caption:
                    caption += f"\n\nüí¨ {update.message.caption}"
                await context.bot.send_animation(
                    chat_id=int(partner_id),
                    animation=update.message.animation.file_id,
                    caption=caption
                )
            else:
                await context.bot.send_message(
                    chat_id=int(partner_id),
                    text="üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø)"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id} –∫ {partner_id}: {e}")
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.",
                parse_mode=ParseMode.HTML
            )
    
    async def handle_admin_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        broadcast_type = self.admin_broadcast_mode.get(user_id)
        
        if not broadcast_type:
            return
        
        success_count = 0
        error_count = 0
        
        status_message = await update.message.reply_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        for target_user_id in self.users:
            try:
                if broadcast_type == "text" and update.message.text:
                    await context.bot.send_message(
                        chat_id=int(target_user_id),
                        text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n{update.message.text}",
                        parse_mode=ParseMode.HTML
                    )
                elif broadcast_type == "photo" and update.message.photo:
                    caption = "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                    if update.message.caption:
                        caption += f"\n\n{update.message.caption}"
                    await context.bot.send_photo(
                        chat_id=int(target_user_id),
                        photo=update.message.photo[-1].file_id,
                        caption=caption
                    )
                elif broadcast_type == "video" and update.message.video:
                    caption = "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                    if update.message.caption:
                        caption += f"\n\n{update.message.caption}"
                    await context.bot.send_video(
                        chat_id=int(target_user_id),
                        video=update.message.video.file_id,
                        caption=caption
                    )
                elif broadcast_type == "audio" and update.message.audio:
                    caption = "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                    if update.message.caption:
                        caption += f"\n\n{update.message.caption}"
                    await context.bot.send_audio(
                        chat_id=int(target_user_id),
                        audio=update.message.audio.file_id,
                        caption=caption
                    )
                elif broadcast_type == "voice" and update.message.voice:
                    await context.bot.send_message(
                        chat_id=int(target_user_id),
                        text="üì¢ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>",
                        parse_mode=ParseMode.HTML
                    )
                    await context.bot.send_voice(
                        chat_id=int(target_user_id),
                        voice=update.message.voice.file_id
                    )
                elif broadcast_type == "video_note" and update.message.video_note:
                    await context.bot.send_message(
                        chat_id=int(target_user_id),
                        text="üì¢ <b>–í–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–µ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>",
                        parse_mode=ParseMode.HTML
                    )
                    await context.bot.send_video_note(
                        chat_id=int(target_user_id),
                        video_note=update.message.video_note.file_id
                    )
                
                success_count += 1
                await asyncio.sleep(0.05)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–º–∏—Ç–æ–≤
                
            except Exception as e:
                error_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        
        await status_message.edit_text(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üì§ –£—Å–ø–µ—à–Ω–æ: <b>{success_count}</b>\n"
            f"‚ùå –û—à–∏–±–æ–∫: <b>{error_count}</b>",
            parse_mode=ParseMode.HTML
        )
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏
        del self.admin_broadcast_mode[user_id]

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    
    if update and update.effective_chat:
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
        except:
            pass

async def setup_bot():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
    bot = AnonymousBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await bot.setup_commands(application)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("find", bot.find_command))
    application.add_handler(CommandHandler("next", bot.next_command))
    application.add_handler(CommandHandler("end", bot.end_command))
    application.add_handler(CommandHandler("admin", bot.admin_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    application.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND,
        bot.handle_message
    ))
    
    return application

async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    application = await setup_bot()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    )

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "This event loop is already running" in str(e):
            # –î–ª—è Replit –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π loop
            loop = asyncio.get_event_loop()
            task = loop.create_task(main())
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            import threading
            
            def run_task():
                try:
                    loop.run_until_complete(task)
                except:
                    pass
            
            thread = threading.Thread(target=run_task)
            thread.start()
            thread.join()
        else:
            raise
